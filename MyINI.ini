[This Programs Code]
Name=Form1
Note=Option Explicit***RETURN***Private Sub Command3_Click()***RETURN***Dim x As Integer***RETURN***For x = 0 To List1.ListCount - 1***RETURN***If List1.Selected(x) = True Then List1.Selected(x) = False***RETURN***Next x***RETURN***Text1.Text = ""***RETURN***Text2.Text = ""***RETURN***RichTextBox1.Text = ""***RETURN***Command1.Enabled = True***RETURN***Command1.Caption = "Add"***RETURN***End Sub***RETURN***Private Sub Form_Load()***RETURN***Command1.Enabled = False***RETURN***PopulateEntrys***RETURN***End Sub***RETURN***Private Sub Command1_Click()***RETURN***Dim x As Integer***RETURN***If Command1.Caption = "Add" Then***RETURN***For x = 0 To List1.ListCount - 1***RETURN***If Text1.Text = List1.List(x) Then Exit Sub***RETURN***Next x***RETURN***SetInitEntry Text1.Text, "Name", Text2.Text, App.Path & "\MyINI.ini"***RETURN***SetInitEntry Text1.Text, "Note", Replace(RichTextBox1.Text, vbCrLf, "***RETURN***"), App.Path & "\MyINI.ini"***RETURN***PopulateEntrys***RETURN***Command1.Caption = "Update"***RETURN***ElseIf Command1.Caption = "Update" Then***RETURN***For x = 0 To List1.ListCount - 1***RETURN***If Text1.Text = List1 Then***RETURN***SetInitEntry Text1.Text, "Name", Text2.Text, App.Path & "\MyINI.ini"***RETURN***SetInitEntry Text1.Text, "Note", Replace(RichTextBox1.Text, vbCrLf, "***RETURN***"), App.Path & "\MyINI.ini"***RETURN***Exit Sub***RETURN***Else***RETURN***MsgBox "Description has changed ! You have to press New to add a new entree !"***RETURN***Text1.Text = List1***RETURN***Exit Sub***RETURN***End If***RETURN***Next x***RETURN***End If***RETURN***End Sub***RETURN***Private Sub Command2_Click()***RETURN***Dim x As Integer***RETURN***For x = 0 To List1.ListCount - 1***RETURN***If List1.Selected(x) = True Then***RETURN***SetInitEntry List1.List(x), , , App.Path & "\MyINI.ini"***RETURN***Text1.Text = ""***RETURN***Text2.Text = ""***RETURN***RichTextBox1.Text = ""***RETURN***End If***RETURN***Next x***RETURN***PopulateEntrys***RETURN***End Sub***RETURN***Private Sub PopulateEntrys()***RETURN***Dim sParts() As String***RETURN***Dim i As Integer***RETURN***List1.Clear***RETURN***sParts() = Split(GetInitEntry(vbNullString, "", "", App.Path & "\MyINI.ini"), Chr(0))***RETURN***For i = 0 To UBound(sParts) - 1***RETURN***List1.AddItem sParts(i)***RETURN***Next i***RETURN***End Sub***RETURN***Private Sub List1_Click()***RETURN***Dim x As Integer***RETURN***For x = 0 To List1.ListCount - 1***RETURN***If List1.Selected(x) = True Then***RETURN***Text2.Text = GetInitEntry(List1.List(x), "Name", "", App.Path & "\MyINI.ini")***RETURN***RichTextBox1.Text = Replace(GetInitEntry(List1.List(x), "Note", "", App.Path & "\MyINI.ini"), "***RETURN***", vbCrLf)***RETURN***Text1.Text = List1.List(x)***RETURN***Exit For***RETURN***End If***RETURN***Next x***RETURN***Command1.Enabled = True***RETURN***Command1.Caption = "Update"***RETURN***End Sub
[This Programs Modual]
Name=ModINI.bas
Note=Option Explicit***RETURN******RETURN***'sDefInitFileName is setup as (AppPath\AppEXEName.Ini)***RETURN***'and is used as the Default Initialization Filename***RETURN***Private sDefInitFileName As String***RETURN******RETURN***Private Declare Function GetPrivateProfileString Lib "kernel32" Alias "GetPrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpDefault As String, ByVal lpReturnedString As String, ByVal nSize As Long, ByVal lpFileName As String) As Long***RETURN***Private Declare Function WritePrivateProfileString Lib "kernel32" Alias "WritePrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpString As Any, ByVal lpFileName As String) As Long***RETURN***Public Function GetInitEntry(ByVal sSection As String, ByVal sKeyName As String, Optional ByVal sDefault As String = "", Optional ByVal sInitFileName As String = "") As String***RETURN******RETURN***'This Function Reads In a String From The Init File.***RETURN***'Returns Value From Init File or sDefault If No Value Exists.***RETURN***'sDefault Defaults to an Empty String ("").***RETURN***'Creates and Uses sDefInitFileName (AppPath\AppEXEName.Ini)***RETURN***'if sInitFileName Parameter Is Not Passed In.***RETURN******RETURN***Dim sBuffer As String***RETURN***Dim sInitFile As String***RETURN******RETURN***    'If Init Filename NOT Passed In***RETURN***    If Len(sInitFileName) = 0 Then***RETURN***        'If Static Init FileName NOT Already Created***RETURN***        If Len(sDefInitFileName) = 0 Then***RETURN***            'Create Static Init FileName***RETURN***            sDefInitFileName = App.Path***RETURN***            If Right$(sDefInitFileName, 1) <> "\" Then***RETURN***                sDefInitFileName = sDefInitFileName & "\"***RETURN***            End If***RETURN***            sDefInitFileName = sDefInitFileName & App.EXEName & ".ini"***RETURN***        End If***RETURN***        sInitFile = sDefInitFileName***RETURN***    Else    'If Init Filename Passed In***RETURN***        sInitFile = sInitFileName***RETURN***    End If***RETURN***    ***RETURN***    sBuffer = String$(999999, " ")***RETURN***    GetInitEntry = Left$(sBuffer, GetPrivateProfileString(sSection, ByVal sKeyName, sDefault, sBuffer, Len(sBuffer), sInitFile))***RETURN******RETURN***End Function***RETURN***Public Function SetInitEntry(ByVal sSection As String, Optional ByVal sKeyName As String, Optional ByVal sValue As String, Optional ByVal sInitFileName As String = "") As Long***RETURN******RETURN***'This Function Writes a String To The Init File.***RETURN***'Returns WritePrivateProfileString Success or Error.***RETURN***'Creates and Uses sDefInitFileName (AppPath\AppEXEName.Ini)***RETURN***'if sInitFileName Parameter Is Not Passed In.***RETURN******RETURN***'***** CAUTION ********RETURN***'If sValue is Null then sKeyName is deleted from the Init File.***RETURN***'If sKeyName is Null then sSection is deleted from the Init File.***RETURN******RETURN***Dim sInitFile As String***RETURN******RETURN***    'If Init Filename NOT Passed In***RETURN***    If Len(sInitFileName) = 0 Then***RETURN***        'If Static Init FileName NOT Already Created***RETURN***        If Len(sDefInitFileName) = 0 Then***RETURN***            'Create Static Init FileName***RETURN***            sDefInitFileName = App.Path***RETURN***            If Right$(sDefInitFileName, 1) <> "\" Then***RETURN***                sDefInitFileName = sDefInitFileName & "\"***RETURN***            End If***RETURN***            sDefInitFileName = sDefInitFileName & App.EXEName & ".ini"***RETURN***        End If***RETURN***        sInitFile = sDefInitFileName***RETURN***    Else    'If Init Filename Passed In***RETURN***        sInitFile = sInitFileName***RETURN***    End If***RETURN***    ***RETURN***    If Len(sKeyName) > 0 And Len(sValue) > 0 Then***RETURN***        SetInitEntry = WritePrivateProfileString(sSection, ByVal sKeyName, ByVal sValue, sInitFile)***RETURN***    ElseIf Len(sKeyName) > 0 Then***RETURN***        SetInitEntry = WritePrivateProfileString(sSection, ByVal sKeyName, vbNullString, sInitFile)***RETURN***    Else***RETURN***        SetInitEntry = WritePrivateProfileString(sSection, vbNullString, vbNullString, sInitFile)***RETURN***    End If***RETURN******RETURN***End Function
